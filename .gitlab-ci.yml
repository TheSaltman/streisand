image: docker:stable

stages:
 - build
 - test
 - release
 - deploy

services:
 - postgres
 - docker:dind

variables:
  CONTAINER_BACKEND_IMAGE: registry.ronzertnert.me/JumpCut/JumpCut:$CI_COMMIT_REF_NAME

before_script:
  -  echo $CI_REGISTRY_USER  $CI_REGISTRY_PASSWORD
  -  docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.ronzertnert.me

build:
  stage: build
  script:
    - docker build --pull -t $CI_REGISTRY_BACK
    - docker build --pull -t $CI_REGISTRY_FRONT
    - docker push registry.ronzertnert.me/jumpcut/jumpcut:$CI_COMMIT_REF_NAME

python_linter:
  stage: test
  script:
    - docker pull $CI_REGISTRY
    - docker run $CI_REGISTRY invoke run-python-linter

migrations_and_fixtures:
  stage: test
  script:
    - docker pull $CI_REGISTRY
    - docker run $CI_REGISTRY -e "DATABASE_URL=postgres://postgres:postgres@postgres:5432/ci" invoke clean-slate 

python_tests:
  stage: test
  script:
    - docker pull $CI_REGISTRY
    - docker $CI_REGISTRY ci -e "DATABASE_URL=postgres://postgres:postgres@postgres:5432/ci" invoke run-python-tests --coverage

# TODO frontend linter/tests?

release-develop:
  stage: release
  script:
    - docker pull $CI_REGISTRY
      # and then build frontend webpack, build up worker images etc.
      # push all images to the registry with the develop tag
  only:
    - develop

release-production:
  stage: release
  script:
    - docker pull $CI_REGISTRY
      # and then build frontend webpack, build up worker images etc.
      # push all images to the registry with the production tag
  only:
    - master

deploy-develop:
  stage: deploy
  script:
    - echo hi # will be the deploy script
  only:
    - develop

deploy-production:
  stage: deploy
  script:
    - echo hi # will be the deploy script
  only:
    - master
