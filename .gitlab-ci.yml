image: docker:stable

stages:
 - build
 - test
 - release
 - deploy

services:
 - postgres
 - docker:dind

variables:
  CONTAINER_BACKEND_IMAGE: registry.ronzertnert.me/JumpCut/JumpCut/backend-ci:$CI_COMMIT_REF_NAME
  CONTAINER_FRNTEND_IMAGE: registry.ronzertnert.me/JumpCut/JumpCut/frontend-ci:$CI_COMMIT_REF_NAME

before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.ronzertnert.me

build:
  stage: build
  script:
    - docker build --pull -t $CONTAINER_BACKEND_IMAGE backend
    - docker push $CONTAINER_BACKEND_IMAGE
    - docker build --pull -t $CONTAINER_FRONTEND_IMAGE frontend
    - docker build $CONTAINER_FRONTEND_IMAGE frontend

python_linter:
  stage: test
  script:
    - docker pull $CONTAINER_BACKEND_IMAGE
    - docker run $CONTAINER_BACKEND_IMAGE invoke run-python-linter

migrations_and_fixtures:
  stage: test
  script:
    - docker pull $CONTAINER_BACKEND_IMAGE
    - docker run $CONTAINER_BACKEND_IMAGE -e "DATABASE_URL=postgres://postgres:postgres@postgres:5432/ci" invoke clean-slate 

python_tests:
  stage: test
  script:
    - docker pull $CONTAINER_BACKEND_IMAGE
    - docker $CONTAINER_BACKEND_IMAGE ci -e "DATABASE_URL=postgres://postgres:postgres@postgres:5432/ci" invoke run-python-tests --coverage

# TODO frontend linter/tests?

release-develop:
  stage: release
  script:
    - docker pull $CONTAINER_FRONTEND_IMAGE
      # and then build frontend webpack, build up worker images etc.
      # push all images to the registry with the develop tag
  only:
    - develop

release-production:
  stage: release
  script:
    - docker pull $CONTAINER_FRONTEND_IMAGE
      # and then build frontend webpack, build up worker images etc.
      # push all images to the registry with the production tag
  only:
    - master

deploy-develop:
  stage: deploy
  script:
    - echo hi # will be the deploy script
  only:
    - develop

deploy-production:
  stage: deploy
  script:
    - echo hi # will be the deploy script
  only:
    - master
