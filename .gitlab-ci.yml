image: python:3.6

services:
 - postgres
 - docker:dind

stages:
 - test
 - release
 - deploy


variables:
  CONTAINER_BACKEND_IMAGE: registry.ronzertnert.me/jumpcut/jumpcut:$CI_COMMIT_REF_NAME
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache"
  DATABASE_URL: "postgres://postgres:postgres@postgres:5432/ci"

cache:
  paths:
    - .cache/
    - venv/

before_script:
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - cd backend
  - pip install -r requirements.txt
  - pip install -r testing_requirements.txt

python_linter:
  stage: test
  script:
    - invoke run-python-linter

migrations_and_fixtures:
  stage: test
  script:
    - invoke clean-slate
    - invoke fixtures

python_tests:
  stage: test
  script:
    - invoke run-python-tests --coverage

## TODO frontend linter/tests?
#
#release-develop:
#  stage: release
#  before_script:
#    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.ronzertnert.me
#  script:
#    - docker pull $CONTAINER_BACKEND_IMAGE
#      # and then build frontend webpack, build up worker images etc.
#      # push all images to the registry with the develop tag
#  only:
#    - develop

release-production:
  stage: release
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.ronzertnert.me
  script:
    - docker pull $CONTAINER_BACKEND_IMAGE
    - docker tag $CONTAINER_BACKEND_IMAGE
      # and then build frontend webpack, build up worker images etc.
      # push all images to the registry with the production tag
  only:
    - master

deploy-develop:
  stage: deploy
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.ronzertnert.me
  script:
    - echo hi # will be the deploy script
  only:
    - develop

deploy-production:
  stage: deploy
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.ronzertnert.me
  script:
    - echo hi # will be the deploy script
  only:
    - master
